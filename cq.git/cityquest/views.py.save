from django.shortcuts import render_to_response, render, get_object_or_404 
from django.http import HttpResponse, HttpResponseRedirect
from django.template import RequestContext
from django.contrib import auth
from django.contrib.auth.decorators import login_required
from django.core.cache import cache
from cityquest.models import Event, UserProfile, Attendee
from cityquest.forms import EventForm, UserForm, EditEventForm
from django.template.defaultfilters import slugify
from django.contrib.auth import get_user_model
from cityquest.admin import newUserChangeForm
from django.contrib.auth.forms import UserChangeForm

# Create your views here.
@login_required()
def test(request):
    return render_to_response('cityquest/index.html', context_instance=RequestContext(request))

def event(request, event_id, slug):
    #cache_key = 'event_page'
    #cache_time = 1 #TTL
    #result = cache.get(cache_key)
    #if not result:
    event = Event.objects.get(id = event_id)
    owner = get_user_model().objects.get(username = event.owner.username)
    result = render_to_response('cityquest/event.html', {"event": event, "owner": owner}, context_instance=RequestContext(request))
       # cache.set(cache_key, result, cache_time)
    return result

def home(request):
   # cache_key = 'home_page'
   # cache_time = 1 #TTL
   # result = cache.get(cache_key)
   # if not result:
    result = render_to_response('cityquest/login.html', context_instance=RequestContext(request))
       # cache.set(cache_key, result, cache_time)
    return result

def eventlist(request):
    if request.method == 'GET':
        requestCategory = request.GET.get('category','')
	requestLocation = request.GET.get('location','')  
        events = Event.objects.all().filter(category = requestCategory, public = True, address__contains = requestLocation)
        result = render_to_response('cityquest/eventlist.html', {'events':events}, context_instance = RequestContext(request))
    else:
        events = Event.objects.all().filter(public = True)
    	result = render_to_response('cityquest/eventlist.html', {'events':events}, context_instance = RequestContext(request))
    return result

@login_required()
def myprofile(request):
    events = Event.objects.all()
    result = render_to_response('cityquest/myprofile.html', {'events':events}, context_instance=RequestContext(request))
    return result

@login_required()
def createevent(request):
    context = RequestContext(request)
    if request.method == 'POST':
        form = EventForm(request.POST)
        if form.is_valid():
            instance = form.save(commit = False)
            instance.owner = request.user
            instance.attendees = 1
            instance.slug = slugify(instance.eventname)
            instance.save()
            return event(request, instance.id, instance.slug)
        else:
            print form.errors
    else:
        form = EventForm()
    return render_to_response("cityquest/createEvent.html", context)

@login_required()
def editevent(request, event_id, slug):
    context = RequestContext(request)
    currentEvent = Event.objects.get(id = event_id)
    if request.method == 'POST':
        form = EditEventForm(request.POST, instance = currentEvent)
        if form.is_valid():
            instance = form.save(commit = False)
            #instance.owner = request.user
            #instance.attendees = currentEvent.attendees
            instance.slug = slugify(instance.eventname)
            instance.save()
            return event(request, instance.id, instance.slug)
        else:
            print form.errors
    else:
        form = EditEventForm(instance = currentEvent)
    return render_to_response("cityquest/editEvent.html", {'form': form, 'event': currentEvent}, context)

@login_required()
def editprofile(request):
    context = RequestContext(request)
    me = get_user_model().objects.get(username = request.user.username)
    if request.method == 'POST':
        form = UserForm(request.POST, request.FILES, instance = me)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/cq/cityquest/myprofile/')
        else:
            print form.errors
    else:
         form = UserForm(instance = me)
    return render_to_response("cityquest/editprofile.html", {'form': form}, context)

@login_required()
def attend(request):
    event = get_object_or_404(Event, id = request.POST.get('event'))
    event.attendees += 1
    event.save()
    attendee = Attendee(username = request.user, eventname = event)
    attendee.save() 
    return event(re
